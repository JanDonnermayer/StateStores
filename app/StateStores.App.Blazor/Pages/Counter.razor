@page "/counter/{name}"
@inject IStateStore stateStore
@implements IDisposable

<h1>Counter @Name</h1>

<p>Current state: @currentState</p>

<button class="btn btn-primary" @onclick="IncrementCountAsync">Click me</button>

@code {

    [Parameter]
    public string Name { get; set; }

    private string currentState = "";

    private IStateStoreProxy<string> proxy;

    private IDisposable disposable;

    private async Task IncrementCountAsync()
    {
       if (currentState == "") await proxy.AddAsync(Guid.NewGuid().ToString());
       await proxy.UpdateAsync(currentState, Guid.NewGuid().ToString());
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        proxy = stateStore.CreateProxy<string>(Name);

        Interlocked.Exchange(ref disposable, proxy           
            .OnNext()
            .Do(_ => currentState = _)
            .ObserveOn(SynchronizationContext.Current)
            .Subscribe(_ => StateHasChanged()))
            ?.Dispose();
    }

    public void Dispose() => disposable?.Dispose();

}
