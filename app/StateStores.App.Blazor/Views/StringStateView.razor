@inject IStateStore stateStore
@implements IDisposable

<h1 style="float: left; margin-right: 15px">State of</h1>
<h1 style="@GenerateFromText(Name)">@Name</h1>

@if(String.Equals(CurrentState, NO_STATE))
{
   <button class="btn btn-primary" @onclick="AddAsync">Add</button>
}
else
{
   <div class="form-group">
      <label for="inputCurrentState">Current:</label>
      <input style="@GenerateFromText(CurrentState)" 
            type="text" class="form-control" 
            id="inputCurrentState" @bind="@CurrentState" 
            readonly />
      <br />
      <label for="inputNextState">Next:</label>
      <input style="@GenerateFromText(NextState)" 
            type="text" class="form-control" 
            id="inputNextState" @bind="@NextState" />
      <br />
      <button class="btn btn-primary" @onclick="UpdateAsync">Update</button>
      <button class="btn btn-danger" @onclick="RemoveAsync">Delete</button>
   </div>
}


@code {

   [Parameter]
   public string Name { get; set; }

   private IStateChannel<string> channel;

   private IDisposable disposable;

   private const string NO_STATE = "NO_STATE";

   private string _currentState;
   private string CurrentState { 
       get => _currentState;
       set { 
          _currentState = value;
          TryStateHasChanged();
      }
   }

   private string _nextState;
   private string NextState { 
       get => _nextState;
       set { 
          _nextState = value;
          TryStateHasChanged();
      }
   }

   [System.Diagnostics.DebuggerStepThrough]
   private void TryStateHasChanged()
   {
      try
      {
         StateHasChanged();
      }
      catch (ObjectDisposedException)
      {
         return;
      }
   }
   
   private void OnUpdateState(string state)
   {
      _currentState = state;
      _nextState = Guid.NewGuid().ToString();
      TryStateHasChanged();
   }

   private async Task AddAsync() 
   {
      await channel.AddAsync(NextState);
   }

   private async Task UpdateAsync()
   {
      await channel.UpdateAsync(CurrentState, NextState);
   }

   private async Task RemoveAsync()
   {
      await channel.RemoveAsync(CurrentState);
   }


   protected override async Task OnParametersSetAsync()
   {
      await base.OnParametersSetAsync();

      channel = stateStore.CreateChannel<string>(Name);

      disposable = channel
         .OnNext()     
         .Merge(channel.OnRemove.Select(_ => NO_STATE))
         .Merge(Observable.Return(NO_STATE))
         .ObserveOn(SynchronizationContext.Current)
         .Subscribe(OnUpdateState);
   }

   public void Dispose() => disposable?.Dispose();

}

