@inject IStateStore stateStore
@typeparam TState
@implements IDisposable

<h1>States of type [@typeof(TState).FullName]</h1>


@if (states == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var state in states.OrderBy(i => i.Key))
            {
                <tr>
                    <td><ColoredLabel Text="@state.Key.ToString()"/></td>
                    <td><ColoredLabel Text="@state.Value?.ToString()"/></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IDictionary<string, TState> states;

    private IDisposable disposable;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
       
        disposable = stateStore           
            .GetObservable<TState>()
            .Do(_ => states = _.Last())
            .ObserveOn(SynchronizationContext.Current)
            .Subscribe(_ => StateHasChanged());
    }

    public void Dispose() => disposable?.Dispose();

}
